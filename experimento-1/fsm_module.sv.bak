module fsm_module
(
    input logic clock,
    input logic reset,
    input logic result, // result of comparator
    output logic [4:0] ingredient
);

    // states //
    logic [1:0] state;
    logic [1:0] next_sate;

    // next_state //
    always_ff @(posedge clock or posedge reset)
        if (reset)
            state = 3'b000;
        else
            state = next_state

    // next_state //
    always_comb 
        case(state)
            3'b000: if (result) next_state = 3'b001; else next_state = 3'b000;

            3'b001: if (result) next_state = 3'b010; else next_state = 3'b001;

            3'b010: if (result) next_state = 3'b011; else next_state = 3'b010;

            3'b011: if (result) next_state = 3'b100; else next_state = 3'b011;

            3'b100: if (result) next_state = 3'b101; else next_state = 3'b100;

            3'b101: next_state = 3'b101;

            default : next_state = 3'b000;
        endcase

    // output //
    begin
        case (state):
            3'b000: assign ingredient = 5'b00001;
            3'b001: assign ingredient = 5'b00010;
            3'b010: assign ingredient = 5'b00100;
            3'b011: assign ingredient = 5'b01000;
            3'b100: assign ingredient = 5'b10000;
        endcase
    end

endmodule